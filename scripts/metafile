#!/usr/bin/python
#from metap2p.factory import ServerFactory
# vim: set filetype=python

#
# This is a bootstrap application for MetaP2P
#

import os, sys
metap2p_root = os.path.join(sys.prefix, "share", "metap2p")
metap2p_config = os.path.join(metap2p_root, "config")

from metap2p import initenv
import metap2p.metafile as metafile
from metap2p.trdparty import bencode

def print_help():
    print "metafile is a mechanism in metap2p for sending directory structures in an insanely flexible and secure way"
    print ""
    print "  add <directory> [digest-name]"
    print "    Will add a directory and create the crunchfile under files/[digest-name].cns"
    print "    "
    print "  read <directory> <digest-file> <filename> <part>"
    print "    A test function to read a part of a file"
    print "    "
    print "  write <directory> <digest-file> <filename> <part>"
    print "    A test function to write a part of a file (reads part first)"
    print "    "
    print "  test <directory> [digest-file]"
    print "    Will test that an entire directory structure is valid according to crunchfile"
    print "    "
    return 1

def act_add(server, argv):
  if len(argv) < 1:
    return print_help();
  
  import os

  dir = argv[0]
  
  if not os.path.isdir(dir):
    print "Not a directory - %s"%(dir)
    return 2
  
  if len(argv) > 1:
    name = argv[1];
  else:
    name = os.path.basename(dir)
  
  mf = metafile.MetaFile(dir, name=name);
  
  writeto = server.get_file(mf.filename())
  
  print writeto

  f = open(writeto, 'w')
  f.write(mf.dumps())
  f.close();

def act_test(server, argv):
  import sys
  
  if len(argv) < 1:
    return print_help();
  
  dir = argv[0]
  
  if len(argv) > 1:
    mf_name = argv[1]
  else:
    mf_name = None
  
  try:
    mf = metafile.MetaFile(dir, digest=False, name=mf_name);
  except metafile.MetaError, e:
    print str(e)
    return 1
  
  readfrom = server.get_file(mf.filename())
  
  f = open(readfrom, 'r')
  mf.loads(f.read());
  f.close();
  
  for fn, fp in mf.real_paths.items():
    sys.stdout.write("%-20s "%(fn))
    
    if not os.path.isfile(fp):
      sys.stdout.write("DOES NOT EXIST!\n")
      continue
    
    sys.stdout.flush();
    
    try:
      for i, pp in mf.validate(fn):
        if pp:
          sys.stdout.write(".")
        else:
          sys.stdout.write("!")
        
        sys.stdout.flush();

      sys.stdout.write('\n')
    except metafile.MetaError, e:
      sys.stdout.write('%s\n'%(str(e)))

def act_count(server, argv):
  if len(argv) < 1:
    return print_help();
  
  mf_path = argv[0]
  
  if not os.path.isfile(mf_path):
    print "Not a file - %s"%(mf_path)
    return 3
  
  try:
    mf = metafile.MetaFile(dir, digest=False, from_path=mf_path);
  except metafile.MetaError, e:
    print str(e)
    return 1
  
  #print mf._dumps()['dirs']
  print "files: #%d"%(len(mf.files))
  print "dirs:  #%d"%(len(mf.dirs))

def act_inspect(server, argv):
  if len(argv) < 1:
    return print_help();
  
  mf_path = argv[0]
  
  if not os.path.isfile(mf_path):
    print "Not a file - %s"%(mf_path)
    return 3

  f = open(mf_path, 'r')
  dd = bencode.bdecode(f.read());
  f.close();
  
  #try:
  #  mf = metafile.MetaFile(None, digest=False, from_path=mf_path);
  #except metafile.MetaError, e:
  #  print str(e)
  #  return 1
  
  import pprint
  pp = pprint.PrettyPrinter(indent=2);
  pp.pprint(dd)
  #print mf._dumps()['dirs']
  #print "files: #%d"%(len(mf.files))
  #print "dirs:  #%d"%(len(mf.dirs))

def act_read(server, argv):
  if len(argv) < 3:
    return print_help();
  
  if len(argv) > 3:
    mf_name = argv[3]
  else:
    mf_name = None

  dir = argv[0]
  
  if not os.path.isdir(dir):
    print "Not a directory - %s"%(dir)
    return 2
  
  try:
    mf = metafile.MetaFile(dir, digest=False, name=mf_name);
  except metafile.MetaError, e:
    print str(e)
    return 1
  
  readfrom = server.get_file(mf.filename())
  
  f = open(readfrom, 'r')
  mf.loads(f.read());
  f.close();
  
  fn = argv[1]
  cc = int(argv[2])
  
  hh, s = mf.read(fn, cc)

  if hh[1]:
    print "CHUNK OK"
  else:
    print "CHUNK BAD"
  
  if len(s) > 256:
    print "%d (omitted, %d bytes long)"%(hh[0], len(s))
  else:
    print "%4d %s"%(hh[0], repr(s))

def act_write(server, argv):
  if len(argv) < 3:
    return print_help();
  
  if len(argv) > 3:
    mf_name = argv[3]
  else:
    mf_name = None

  dir = argv[0]
  
  if not os.path.isdir(dir):
    print "Not a directory - %s"%(dir)
    return 2
  
  try:
    mf = metafile.MetaFile(dir, digest=False, name=mf_name);
  except metafile.MetaError, e:
    print str(e)
    return 1
  
  readfrom = server.get_file(mf.filename())
  
  f = open(readfrom, 'r')
  mf.loads(f.read());
  f.close();
  
  fn = argv[1]
  cc = int(argv[2])
  
  hh, s = mf.read(fn, cc)
  hh = mf.write(fn, cc, s)
  
  if hh[1]:
    print "CHUNK OK"
  else:
    print "CHUNK BAD"
  
  if len(s) > 256:
    print "%d (omitted, %d bytes long)"%(hh[0], len(s))
  else:
    print "%4d %s"%(hh[0], repr(s))

def act_copy(server, argv):
  if len(argv) < 2:
    return print_help();
  
  if len(argv) > 2:
    mf_name= argv[2]
  else:
    mf_name = None
  
  dir = argv[0]
  dir_to = argv[1]
  
  try:
    mf = metafile.MetaFile(dir, digest=False, name=mf_name);
    
    f = open(server.get_file(mf.filename()), 'r')
    mf.loads(f.read());
    f.close();
    
    if not mf.all_valid():
      print "Source is not complete"
      return 3
    
    mf_to = metafile.MetaFile(dir_to, digest=False, from_meta=mf)
    mf_to.create_directories();
    mf_to.create_skeletons();
  except metafile.MetaError, e:
    print str(e)
    return 1
  
  needs = mf_to.generate_needs();
  
  # iterate needs, read from source, write to target
  for need in needs:
    print need
    fn, cc = need
    res, s = mf.read(fn, cc)
    mf_to.write(fn, cc, s)
  
  # make sure target is valid.
  if not mf_to.all_valid():
    print "Target is not complete"
  
def main(argv):
  if len(argv) < 1:
    return print_help();
  
  server = initenv(metap2p_root, metap2p_config)
  
  if argv[0] == 'add':
    return act_add(server, argv[1:]);

  if argv[0] == 'test':
    return act_test(server, argv[1:]);
  
  if argv[0] == 'count':
    return act_count(server, argv[1:]);
  
  if argv[0] == 'inspect':
    return act_inspect(server, argv[1:]);
  
  if argv[0] == 'read':
    return act_read(server, argv[1:]);
  
  if argv[0] == 'write':
    return act_write(server, argv[1:]);
  
  if argv[0] == 'copy':
    return act_copy(server, argv[1:]);
  
  return print_help();

if __name__ == '__main__':
  sys.exit(main(sys.argv[1:]))
